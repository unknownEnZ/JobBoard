@page "/applications/create"
@inject HttpClient _client
@inject NavigationManager _navManager


<h3 class="card-title">Create New Applications</h3>
<hr />
<br />

@* 
<EditForm Model="@application" OnValidSubmit="CreateApplication">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Resume: </label>
        <div>
            <InputText @bind-Value="application.Resume" class="form-control" />
            <ValidationMessage For="@(() => application.Resume)" />
        </div>
    </div>
    <div class="form-group">
        <label>Status: </label>
        <div>
            <InputText @bind-Value="application.Status" class="form-control" />
            <ValidationMessage For="@(() => application.Status)" />
        </div>
    </div>
    <div class="form-group">
        <label>Date Submitted</label>
        <div>
            <InputDate @bind-Value="application.DateSubmitted" class="form-control" />
            <ValidationMessage For="@(() => application.DateSubmitted)" />
        </div>
    </div>

    <div class="form-group">
        <label>Job: </label>
        <div>
            <InputSelect @bind-Value="application.JobId" class="form-control">
                <option value="">-- Select Colour --</option>
                @if (Jobs != null)
                {
                    foreach (var job in Jobs)
                    {
                        <option value="@job.Id">@job.JobTitle</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => application.JobId)" />
        </div>
    </div>

    <br />

    <br />

    <button type="submit" class="btn btn-success btn-block">Create Application</button>
    <br />
    <BackToList Target="applications" />
</EditForm> *@



<FormComponent ButtonText="Create Application" application="application" OnValidSubmit="@CreateApplication" />


@code {
    Application application = new Application();

    private IList<Job>? Jobs;
 


    protected async override Task OnInitializedAsync() // whenever the page loads all the data will be loaded
    {
       Jobs = await _client.GetFromJsonAsync<List<Job>>($"{Endpoints.JobsEndpoint}");
       


    }

    private async Task CreateApplication()
    {
        await _client.PostAsJsonAsync(Endpoints.ApplicationsEndpoint, application);
        _navManager.NavigateTo("/applications/");

    }


}
