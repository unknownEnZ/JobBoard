@inject HttpClient _client

<EditForm Model="@employer" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>First Name: </label>
        <div>
            <InputText @bind-Value="employer.FirstName" class="form-control" />
            <ValidationMessage For="@(() => employer.FirstName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Last Name: </label>
        <div>
            <InputText @bind-Value="employer.LastName" class="form-control" />
            <ValidationMessage For="@(() => employer.LastName)" />
        </div>
    </div>
    <br />

    <div class="form-group">
        <label>Phone Number: </label>
        <div>
            <InputText @bind-Value="employer.PhoneNumber" class="form-control" />
            <ValidationMessage For="@(() => employer.PhoneNumber)" />
        </div>
    </div>

    <div class="form-group">
        <label>Email Address: </label>
        <div>
            <InputText @bind-Value="employer.EmailAddress" class="form-control" />
            <ValidationMessage For="@(() => employer.EmailAddress)" />
        </div>
    </div>

    <br />
    <div class="form-group">
        <label>Company: </label>
        <div>
            <InputSelect @bind-Value="employer.CompanyId" class="form-control">
                <option value="">-- Select Company --</option>
                @if (Companies != null)
                {
                    foreach (var company in Companies)
                    {
                        <option value="@company.Id">@company.CompanyName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => employer.CompanyId)" />
        </div>
    </div>

    <br />
     </fieldset>
    @if (!Disabled)
    {


        <button type="submit" class="btn btn-success btn-block"> @ButtonText </button>
    }
    <BackToList Target="employers" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Employer? employer { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }


    private IList<Company>? Companies;




    protected async override Task OnInitializedAsync() // whenever the page loads all the data will be loaded
    {
        Companies = await _client.GetFromJsonAsync<List<Company>>($"{Endpoints.CompaniesEndpoint}");



    }
}