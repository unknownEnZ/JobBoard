@page "/employers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
<h3 class="card-title">Employers </h3>
<br />


<a href="/employers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Employer
</a>
<br />
<br />


@if (Employers == null)
{
    <div class="alert alert-info">Loading Employers...</div>
}
else
{
    <table class="table table-responsive" id="employersTable">
        <!-- <thead>
             <tr>
                 <th>Name</th>
                 <th>Actions</th>
             </tr>
         </thead> -->

        <thead>
            <tr>
                <td>Comapny Name</td>
                <td>Employer Name</td>

                <td>ContactNumber</td>

                <td>EmailAddress</td>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var employer in Employers)
            {
                <tr>
                    <td>@employer.Company.CompanyName</td>
                    <td>@employer.FirstName  @employer.LastName</td>
                    <td>@employer.PhoneNumber</td>
                    <td>@employer.EmailAddress</td>
                    <td>
                        <a href="/employers/view/@employer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>

                        <a href="/employers/edit/@employer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>

                        <button class="btn btn-danger" @onclick="@(()=>Delete(employer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>





}

@code {
    private List<Employer>? Employers;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Employers = await _client.GetFromJsonAsync<List<Employer>>($"{Endpoints.EmployersEndpoint}");
    }

    async Task Delete(int employerId)
    {
        if (Employers != null)
        {
            var employer = Employers.First(q => q.Id == employerId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {employer.Company}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.EmployersEndpoint}/{employerId}");

                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#employersTable");
    }
    public void Dispose()
    {
        _interceptor.MonitorEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#employersTable");
      
    }

}