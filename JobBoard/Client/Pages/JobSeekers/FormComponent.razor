@inject HttpClient _client

<EditForm Model="@jobSeeker" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>First Name: </label>
            <div>
                <InputText @bind-Value="jobSeeker.FirstName" class="form-control" />
                <ValidationMessage For="@(() => jobSeeker.FirstName)" />
            </div>
        </div>

        <div class="form-group">
            <label>Last Name: </label>
            <div>
                <InputText @bind-Value="jobSeeker.LastName" class="form-control" />
                <ValidationMessage For="@(() => jobSeeker.LastName)" />
            </div>
        </div>
        <br />

        <div class="form-group">
            <label>Phone Number: </label>
            <div>
                <InputText @bind-Value="jobSeeker.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => jobSeeker.PhoneNumber)" />
            </div>
        </div>

        <div class="form-group">
            <label>Email Address: </label>
            <div>
                <InputText @bind-Value="jobSeeker.EmailAddress" class="form-control" />
                <ValidationMessage For="@(() => jobSeeker.EmailAddress)" />
            </div>
        </div>

        <br />
        

        <br />
    </fieldset>
    @if (!Disabled)
    {


        <button type="submit" class="btn btn-success btn-block"> @ButtonText </button>
    }
    <BackToList Target="jobSeekers" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public JobSeeker? jobSeeker { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }


   




    protected async override Task OnInitializedAsync() // whenever the page loads all the data will be loaded
    {
        



    }
}